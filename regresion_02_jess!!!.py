# -*- coding: utf-8 -*-
"""regresion_02_jess!!!

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xtDd1bccwHSbLvcxw57rVfOynfbDCbyE
"""

import numpy as np
import pandas as pd

df= pd.read_csv("https://raw.githubusercontent.com/GerhardSpross/clasificacion-prueba/refs/heads/main/day.csv")
display(df.info())
df.head(5)

col_x_features = [
    'yr',
    'holiday',
    'atemp',
    'hum',
    'windspeed'
]

col_y_objetivo = [
    'cnt'
]

X_df = df[col_x_features]

Y_df = df[col_y_objetivo]

x_mins = X_df.min()
x_maxs = X_df.max()

y_min = Y_df.min()
y_max = Y_df.max()

X_normalizada_df = (X_df - x_mins) / (x_maxs - x_mins)
Y_normalizada_df= (Y_df - y_min) / (y_max - y_min)

if (y_max == y_min).all():
  Y_normalizada_df[:] = 0

m = len(Y_normalizada_df)
k = len(col_x_features)

X_norm = X_normalizada_df.values
Y_norm = Y_normalizada_df.values.reshape(m, 1)

X_b = np.c_[np.ones((m, 1)), X_norm]

alpha = 0.01

n_iteraciones = 2000

n_pesos = k + 1

w = np.zeros((n_pesos, 1))

for i in range(n_iteraciones):
  y_pred = X_b.dot(w)

error = y_pred - Y_norm

gradiente = (1/m) * X_b.T.dot(error)

w = w - alpha * gradiente

print ('Mostrando resultados del entrenamiento:')

y_resultado_final = X_b.dot(w)
error_final = y_resultado_final - Y_norm
E_MSE = np.mean(error_final**2)
print("Error cuadratico medio obtenido:", E_MSE)

print(f"w0 (sesgo) = {w[0][0]:.8f}")

for j in range(k):
    print(f"w{j+1} ({col_x_features[j]}): {w[j+1][0]:.8f}")

pesos_ident = [f"{peso:.8f}" for peso in w.flatten()]
pesos_str = " ".join(pesos_ident)
print(f"{pesos_str} {E_MSE: .8f}")

print ('Salida peso de W0, w1, w2, w3, w4, w5:', E_MSE)